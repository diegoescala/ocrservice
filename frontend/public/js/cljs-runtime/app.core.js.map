{"version":3,"sources":["app/core.cljs"],"mappings":";AAQA,GAAA,QAAAA,gCAAAC,qCAAAC;AAAA;AAAA,AAAA,AAASC,gBAAK,6CAAA,7CAACC;;AAEf,eAAA,fAAMC;AAAN,AAAA,0FAAA,+EAAA,mFAEIC;;AAEJ,sBAAA,tBAAuBC;AAAvB,AACE,AAACC;;AACD,IAAMC,UAAQ,wBAAA,xBAAiBC;AAA/B,AACE,oBAAA,AAAAC,gBAAWR;AAAX;AAAA,AACE,AAACS,sBAAOT,cAAK,AAACU,+BAAiBJ;;;AACjC,+DAAA,AAAAE,+BAAA,vFAACG,wEAAaX,kGAAME;;AAExB,gBAAA,hBAAMU;AAAN,AACE,4BAAA,mFAAA,/GAACC;;AACD,AAACC;;AACD,OAACV","names":["js/app","js/app.core","js/app.core.root","app.core/root","cljs.core.atom","app.core/app","app.routes/router-component","app.core/mount-root","re-frame.core/clear-subscription-cache!","root-el","js/document","cljs.core/deref","cljs.core/reset!","reagent.dom.client/create-root","reagent.dom.client.render","app.core/init","re-frame.core/dispatch-sync","app.routes/init-routes!"],"sourcesContent":["(ns app.core\n  (:require [reagent.dom.client :as rdom]\n            [re-frame.core :as rf]\n            [app.config :as config]\n            [app.routes :as routes]\n            [app.events]\n            [app.subs]))\n\n(defonce root (atom nil))\n\n(defn app []\n  [:div.app-container\n   [routes/router-component]])\n\n(defn ^:dev/after-load mount-root []\n  (rf/clear-subscription-cache!)\n  (let [root-el (.getElementById js/document \"app\")]\n    (when-not @root\n      (reset! root (rdom/create-root root-el)))\n    (rdom/render @root [app])))\n\n(defn init []\n  (rf/dispatch-sync [:initialize-db])\n  (routes/init-routes!)\n  (mount-root)) "]}